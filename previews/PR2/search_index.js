var documenterSearchIndex = {"docs":
[{"location":"client/#OPA-Client","page":"Client","title":"OPA Client","text":"","category":"section"},{"location":"client/","page":"Client","title":"Client","text":"OPA exposes domain-agnostic APIs that your service can call to manage and enforce policies. Read this page if you want to integrate an application, service, or tool with OPA. The REST APIs are grouped into the following categories:","category":"page"},{"location":"client/","page":"Client","title":"Client","text":"Policy API - manage policy loaded into the OPA instance.\nData API - evaluate rules and retrieve data.\nQuery API - execute adhoc queries.\nCompile API - access Regoâ€™s Partial Evaluation functionality.\nHealth API - access instance operational health information.\nConfig API - view instance configuration.\nStatus API - view instance status state.","category":"page"},{"location":"client/","page":"Client","title":"Client","text":"The OpenPolicyAgent.Client module includes methods to help interact with the OPA server using the OpenAPI client.","category":"page"},{"location":"client/","page":"Client","title":"Client","text":"opa_client = OpenPolicyAgent.Client.DataApi(openapi_client)\n\nresponse, _http_resp = OpenPolicyAgent.Client.get_document(\n    opa_client,\n    \"policies/server/rest/allowed\"\n);\n@test response.result == false","category":"page"},{"location":"client/","page":"Client","title":"Client","text":"OpenAPI API Documents give more details on the API methods.","category":"page"},{"location":"server/#OPA-Server","page":"Server","title":"OPA Server","text":"","category":"section"},{"location":"server/","page":"Server","title":"Server","text":"The OPA (Open Policy Agent) server is a critical component of the OPA ecosystem, serving as a central policy decision point. It's a standalone service that evaluates policies written in the Rego language and makes access control decisions based on those policies. The OPA server allows for efficient policy enforcement across various parts of a software stack, including microservices, APIs, and cloud infrastructure. It receives policy queries, typically in the form of JSON or structured data, and returns decisions, enabling fine-grained control over authorization and compliance. With its ability to scale and distribute policy evaluations, the OPA server plays a crucial role in ensuring consistent and dynamic policy enforcement in complex, modern, and cloud-native environments, enhancing security and governance across the entire system.","category":"page"},{"location":"server/","page":"Server","title":"Server","text":"The OpenPolicyAgent.Server module includes methods to help start the OPA server, monitor it for failures, and restart when required.","category":"page"},{"location":"server/","page":"Server","title":"Server","text":"function start_opa_server(root_path)\n    opa_server = OpenPolicyAgent.Server.MonitoredOPAServer(\n        joinpath(root_path, \"config.yaml\"),\n        stdout = joinpath(root_path, \"server.stdout\"),\n        stderr = joinpath(root_path, \"server.stderr\"),\n    )\n    OpenPolicyAgent.Server.start!(opa_server)\n    return opa_server\nend\n\nstart_opa_server(\"/tmp/opaserver\")","category":"page"},{"location":"commandline/#OPA-Command-Line","page":"Command Line","title":"OPA Command Line","text":"","category":"section"},{"location":"commandline/","page":"Command Line","title":"Command Line","text":"The OPA (Open Policy Agent) command-line tool is a versatile utility that empowers users to interact with and manage OPA policies and data. It allows users to perform various tasks, such as evaluating policies, testing Rego expressions, and querying data, all from the command line. This tool is invaluable for policy development, debugging, and troubleshooting, providing an accessible way to work with OPA without the need for complex integration. It's an essential companion for developers and administrators working with OPA, simplifying the process of authoring, testing, and refining policies to ensure robust and consistent policy enforcement across software systems.","category":"page"},{"location":"commandline/","page":"Command Line","title":"Command Line","text":"The OPA command line is made available in the OpenPolicyAgent.CLI module. To use, import the module. E.g.:","category":"page"},{"location":"commandline/","page":"Command Line","title":"Command Line","text":"julia> using OpenPolicyAgent\n\njulia> import OpenPolicyAgent: CLI\n\njulia> ctx = CLI.CommandLine();\n\njulia> CLI.opa(ctx; help=true);\nAn open source project to policy-enable your service.\n\nUsage:\n  opa [command]\n\nAvailable Commands:\n  bench        Benchmark a Rego query\n  build        Build an OPA bundle\n  capabilities Print the capabilities of OPA\n  check        Check Rego source files\n  completion   Generate the autocompletion script for the specified shell\n  deps         Analyze Rego query dependencies\n  eval         Evaluate a Rego query\n  exec         Execute against input files\n  fmt          Format Rego source files\n  help         Help about any command\n  inspect      Inspect OPA bundle(s)\n  parse        Parse Rego source file\n  run          Start OPA in interactive or server mode\n  sign         Generate an OPA bundle signature\n  test         Execute Rego test cases\n  version      Print the version of OPA\n\nFlags:\n  -h, --help   help for opa\n\nUse \"opa [command] --help\" for more information about a command.","category":"page"},{"location":"#OpenPolicyAgent.jl","page":"Home","title":"OpenPolicyAgent.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Open Policy Agent (OPA) is an open-source, cloud-native policy engine that allows organizations to declaratively enforce policies across their software stack. It provides a unified, flexible, and efficient way to implement and manage policies for access control, security, and compliance in modern, dynamic environments. OPA excels at decoupling policy decision logic from application code, enabling fine-grained control over authorization, resource validation, and more.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Its expressive policy language, called Rego, allows users to define complex policies in a human-readable format. OPA is widely adopted in cloud-native ecosystems, helping organizations ensure consistent policy enforcement across services, APIs, and infrastructure components, making it a crucial tool for enhancing security and governance in modern software systems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides a Julia interface to the OPA server, and the client APIs to interact with the server. It also includes a command-line interface to the OPA command-line tool.","category":"page"}]
}
