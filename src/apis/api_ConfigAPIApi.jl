# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ConfigAPIApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ConfigAPIApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ConfigAPIApi }) = "http://localhost"

const _returntypes_get_config_ConfigAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Model200SingleResult,
    Regex("^" * replace("500", "x"=>".") * "\$") => Model400,
)

function _oacinternal_get_config(_api::ConfigAPIApi; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_config_ConfigAPIApi, "/v1/config", [])
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get configurations

This API endpoint responds with active configuration (result response)  --- **Note** The `credentials` field in the `services` configuration and  The `private_key` and `key` fields in the `keys` configuration will be omitted from the API response  ---

Params:
- pretty::Bool

Return: Model200SingleResult, OpenAPI.Clients.ApiResponse
"""
function get_config(_api::ConfigAPIApi; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_config(_api; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_config(_api::ConfigAPIApi, response_stream::Channel; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_config(_api; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_config
