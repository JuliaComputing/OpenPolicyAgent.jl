# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DataAPIApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DataAPIApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DataAPIApi }) = "http://localhost"

const _returntypes_delete_document_DataAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Response404,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_delete_document(_api::DataAPIApi, path::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_document_DataAPIApi, "/v1/data/{path}", [])
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a document

This API endpoint deletes an existing document from the server

Params:
- path::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_document(_api::DataAPIApi, path::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_document(_api, path; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_document(_api::DataAPIApi, response_stream::Channel, path::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_document(_api, path; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_document_DataAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeletePolicyModule200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_get_document(_api::DataAPIApi, path::String; input=nothing, pretty=nothing, provenance=nothing, explain=nothing, metrics=nothing, instrument=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_document_DataAPIApi, "/v1/data/{path}", [])
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "input", input)  # type Dict{String, Any}
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "provenance", provenance)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "explain", explain)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "metrics", metrics)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "instrument", instrument)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a document

This API endpoint returns the document specified by `path`.  The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provide the input document but the query has already defined it.

Params:
- path::String (required)
- input::Dict{String, Any}
- pretty::Bool
- provenance::Bool
- explain::String
- metrics::Bool
- instrument::Bool

Return: DeletePolicyModule200Response, OpenAPI.Clients.ApiResponse
"""
function get_document(_api::DataAPIApi, path::String; input=nothing, pretty=nothing, provenance=nothing, explain=nothing, metrics=nothing, instrument=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_document(_api, path; input=input, pretty=pretty, provenance=provenance, explain=explain, metrics=metrics, instrument=instrument, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_document(_api::DataAPIApi, response_stream::Channel, path::String; input=nothing, pretty=nothing, provenance=nothing, explain=nothing, metrics=nothing, instrument=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_document(_api, path; input=input, pretty=pretty, provenance=provenance, explain=explain, metrics=metrics, instrument=instrument, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_document_with_path_DataAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeletePolicyModule200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_get_document_with_path(_api::DataAPIApi, path::String, request_body::Dict{String, Any}; pretty=nothing, provenance=nothing, explain=nothing, metrics=nothing, instrument=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_document_with_path_DataAPIApi, "/v1/data/{path}", [], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "provenance", provenance)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "explain", explain)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "metrics", metrics)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "instrument", instrument)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""Get a document (with input)

The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provided an input document but the query has already defined it.  If `path` indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, a *not found* response (404) will be returned.

Params:
- path::String (required)
- request_body::Dict{String, Any} (required)
- pretty::Bool
- provenance::Bool
- explain::String
- metrics::Bool
- instrument::Bool

Return: DeletePolicyModule200Response, OpenAPI.Clients.ApiResponse
"""
function get_document_with_path(_api::DataAPIApi, path::String, request_body::Dict{String, Any}; pretty=nothing, provenance=nothing, explain=nothing, metrics=nothing, instrument=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_document_with_path(_api, path, request_body; pretty=pretty, provenance=provenance, explain=explain, metrics=metrics, instrument=instrument, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_document_with_path(_api::DataAPIApi, response_stream::Channel, path::String, request_body::Dict{String, Any}; pretty=nothing, provenance=nothing, explain=nothing, metrics=nothing, instrument=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_document_with_path(_api, path, request_body; pretty=pretty, provenance=provenance, explain=explain, metrics=metrics, instrument=instrument, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_document_with_web_hook_DataAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeletePolicyModule200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("404", "x"=>".") * "\$") => Response404,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_get_document_with_web_hook(_api::DataAPIApi, path::String, request_body::Dict{String, Any}; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_document_with_web_hook_DataAPIApi, "/v0/data/{path}", [], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""Get a document (with webhook)

The example given here assumes you have created a policy (with `PUT /v1/policies/{path}`), such as:    ```yaml   package opa.examples   import input.example.flag   allow_request { flag == true }   ```  The server will return a *not found* (404) response if the requested document is missing or undefined. 

Params:
- path::String (required)
- request_body::Dict{String, Any} (required)
- pretty::Bool

Return: DeletePolicyModule200Response, OpenAPI.Clients.ApiResponse
"""
function get_document_with_web_hook(_api::DataAPIApi, path::String, request_body::Dict{String, Any}; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_document_with_web_hook(_api, path, request_body; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_document_with_web_hook(_api::DataAPIApi, response_stream::Channel, path::String, request_body::Dict{String, Any}; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_document_with_web_hook(_api, path, request_body; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_document_DataAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("404", "x"=>".") * "\$") => Response404,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_patch_document(_api::DataAPIApi, path::String, patches_schema_inner::Vector{PatchesSchemaInner}; _mediaType=nothing)
    OpenAPI.validate_param("patches_schema_inner", "patch_document", :minItems, patches_schema_inner, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_document_DataAPIApi, "/v1/data/{path}", [], patches_schema_inner)
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a document

This API endpoint updates an existing document on the server by describing the changes required (using [JSON patch operations](http://jsonpatch.com/))

Params:
- path::String (required)
- patches_schema_inner::Vector{PatchesSchemaInner} (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function patch_document(_api::DataAPIApi, path::String, patches_schema_inner::Vector{PatchesSchemaInner}; _mediaType=nothing)
    _ctx = _oacinternal_patch_document(_api, path, patches_schema_inner; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_document(_api::DataAPIApi, response_stream::Channel, path::String, patches_schema_inner::Vector{PatchesSchemaInner}; _mediaType=nothing)
    _ctx = _oacinternal_patch_document(_api, path, patches_schema_inner; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_put_document_DataAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("304", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("404", "x"=>".") * "\$") => Response404,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_put_document(_api::DataAPIApi, path::String, body::Any; if_none_match=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_put_document_DataAPIApi, "/v1/data/{path}", [], body)
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "If-None-Match", if_none_match)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create or overwrite a document

If the path does not refer to an existing document (for example *us-west/servers*), the server will attempt to create all the necessary containing documents.  This behavior is similar to the Unix command [mkdir -p](https://en.wikipedia.org/wiki/Mkdir#Options).

Params:
- path::String (required)
- body::Any (required)
- if_none_match::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function put_document(_api::DataAPIApi, path::String, body::Any; if_none_match=nothing, _mediaType=nothing)
    _ctx = _oacinternal_put_document(_api, path, body; if_none_match=if_none_match, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function put_document(_api::DataAPIApi, response_stream::Channel, path::String, body::Any; if_none_match=nothing, _mediaType=nothing)
    _ctx = _oacinternal_put_document(_api, path, body; if_none_match=if_none_match, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_document
export get_document
export get_document_with_path
export get_document_with_web_hook
export patch_document
export put_document
