# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PolicyAPIApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `PolicyAPIApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ PolicyAPIApi }) = "http://localhost"

const _returntypes_delete_policy_module_PolicyAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeletePolicyModule200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("404", "x"=>".") * "\$") => Response404,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_delete_policy_module(_api::PolicyAPIApi, id::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_policy_module_PolicyAPIApi, "/v1/policies/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a policy module

This API endpoint removes an existing policy module from the server

Params:
- id::String (required)
- pretty::Bool

Return: DeletePolicyModule200Response, OpenAPI.Clients.ApiResponse
"""
function delete_policy_module(_api::PolicyAPIApi, id::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_policy_module(_api, id; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_policy_module(_api::PolicyAPIApi, response_stream::Channel, id::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_policy_module(_api, id; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_policies_PolicyAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Response200Result,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_get_policies(_api::PolicyAPIApi; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_policies_PolicyAPIApi, "/v1/policies", [])
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List policies

This API endpoint responds with a list of all policy modules on the server (result response)

Params:
- pretty::Bool

Return: Response200Result, OpenAPI.Clients.ApiResponse
"""
function get_policies(_api::PolicyAPIApi; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_policies(_api; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_policies(_api::PolicyAPIApi, response_stream::Channel; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_policies(_api; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_policy_module_PolicyAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Response200Result,
    Regex("^" * replace("404", "x"=>".") * "\$") => Response404,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_get_policy_module(_api::PolicyAPIApi, id::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_policy_module_PolicyAPIApi, "/v1/policies/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a policy module

This API endpoint returns the details of the specified policy module (`{id}`)

Params:
- id::String (required)
- pretty::Bool

Return: Response200Result, OpenAPI.Clients.ApiResponse
"""
function get_policy_module(_api::PolicyAPIApi, id::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_policy_module(_api, id; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_policy_module(_api::PolicyAPIApi, response_stream::Channel, id::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_policy_module(_api, id; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_put_policy_module_PolicyAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Response200Result,
    Regex("^" * replace("400", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_put_policy_module(_api::PolicyAPIApi, id::String, body::String; pretty=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_put_policy_module_PolicyAPIApi, "/v1/policies/{id}", [], body)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "metrics", metrics)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["text/plain", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create or update a policy module

- If the policy module does not exist, it is created. - If the policy module already exists, it is replaced.  If the policy module isn't correctly defined, a *bad request* (400) response is returned.  ### Example policy module ```yaml package opa.examples  import data.servers import data.networks import data.ports  public_servers[server] {   some k, m    server := servers[_]    server.ports[_] == ports[k].id    ports[k].networks[_] == networks[m].id    networks[m].public == true } ```

Params:
- id::String (required)
- body::String (required)
- pretty::Bool
- metrics::Bool

Return: Response200Result, OpenAPI.Clients.ApiResponse
"""
function put_policy_module(_api::PolicyAPIApi, id::String, body::String; pretty=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = _oacinternal_put_policy_module(_api, id, body; pretty=pretty, metrics=metrics, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function put_policy_module(_api::PolicyAPIApi, response_stream::Channel, id::String, body::String; pretty=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = _oacinternal_put_policy_module(_api, id, body; pretty=pretty, metrics=metrics, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_policy_module
export get_policies
export get_policy_module
export put_policy_module
