# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct QueryAPIApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `QueryAPIApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ QueryAPIApi }) = "http://localhost"

const _returntypes_get_query_QueryAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetQuery200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_get_query(_api::QueryAPIApi, q::String; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_query_QueryAPIApi, "/v1/query", [])
    OpenAPI.Clients.set_param(_ctx.query, "q", q)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "explain", explain)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "metrics", metrics)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Execute an ad-hoc query (simple)

This API endpoint returns bindings for the variables in the query.  For more complex JSON queries, use `POST /v1/query` instead.

Params:
- q::String (required)
- pretty::Bool
- explain::String
- metrics::Bool

Return: GetQuery200Response, OpenAPI.Clients.ApiResponse
"""
function get_query(_api::QueryAPIApi, q::String; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_query(_api, q; pretty=pretty, explain=explain, metrics=metrics, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_query(_api::QueryAPIApi, response_stream::Channel, q::String; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_query(_api, q; pretty=pretty, explain=explain, metrics=metrics, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_post_query_QueryAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetQuery200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("501", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_post_query(_api::QueryAPIApi, request_body::Dict{String, Any}; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_post_query_QueryAPIApi, "/v1/query", [], request_body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "explain", explain)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "metrics", metrics)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""Execute an ad-hoc query (complex)

This API endpoint returns bindings for the variables in the query.  For simpler JSON queries, you may use `GET /v1/query` instead.

Params:
- request_body::Dict{String, Any} (required)
- pretty::Bool
- explain::String
- metrics::Bool

Return: GetQuery200Response, OpenAPI.Clients.ApiResponse
"""
function post_query(_api::QueryAPIApi, request_body::Dict{String, Any}; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_query(_api, request_body; pretty=pretty, explain=explain, metrics=metrics, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function post_query(_api::QueryAPIApi, response_stream::Channel, request_body::Dict{String, Any}; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_query(_api, request_body; pretty=pretty, explain=explain, metrics=metrics, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_post_simple_query_QueryAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Response400,
    Regex("^" * replace("404", "x"=>".") * "\$") => Response404,
    Regex("^" * replace("500", "x"=>".") * "\$") => Response400,
)

function _oacinternal_post_simple_query(_api::QueryAPIApi, request_body::Dict{String, Any}; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_post_simple_query_QueryAPIApi, "/", [], request_body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Execute a simple query

This API queries the document at */data/system/main* by default (however, you can [configure OPA](https://www.openpolicyagent.org/docs/latest/configuration/) to use a different path to serve these queries). That document defines the response. For example, use the following in `PUT /v1/policies/{path}`) to define a rule that will produce a value for the */data/system/main* document:    ```yaml   package system   main = msg {     msg := sprintf(\"hello, %v\", input.user)   }   ```  The server will return a *not found* (404) response if */data/system/main* is undefined.

Params:
- request_body::Dict{String, Any} (required)
- pretty::Bool

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function post_simple_query(_api::QueryAPIApi, request_body::Dict{String, Any}; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_simple_query(_api, request_body; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function post_simple_query(_api::QueryAPIApi, response_stream::Channel, request_body::Dict{String, Any}; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_simple_query(_api, request_body; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_query
export post_query
export post_simple_query
