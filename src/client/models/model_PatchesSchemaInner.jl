# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""patchesSchema_inner
A JSON patch operation

    PatchesSchemaInner(;
        op=nothing,
        path=nothing,
        value=nothing,
    )

    - op::String : JSON patch operation type
    - path::String : A [JSON pointer](https://tools.ietf.org/html/rfc6901) to a location within the target document where the operation is performed.  The *effective path* is this value prefixed with the API call&#39;s &#x60;path&#x60; parameter.  The server will return a *bad request* (404) response if:  - The *parent* of the effective path does not refer to an existing document - For **remove** and **replace** operations, the effective path does not refer to an existing document.
    - value::Dict{String, Any} : The value to add, replace or test.
"""
Base.@kwdef mutable struct PatchesSchemaInner <: OpenAPI.APIModel
    op::Union{Nothing, String} = nothing
    path::Union{Nothing, String} = nothing
    value::Union{Nothing, Dict{String, Any}} = nothing

    function PatchesSchemaInner(op, path, value, )
        OpenAPI.validate_property(PatchesSchemaInner, Symbol("op"), op)
        OpenAPI.validate_property(PatchesSchemaInner, Symbol("path"), path)
        OpenAPI.validate_property(PatchesSchemaInner, Symbol("value"), value)
        return new(op, path, value, )
    end
end # type PatchesSchemaInner

const _property_types_PatchesSchemaInner = Dict{Symbol,String}(Symbol("op")=>"String", Symbol("path")=>"String", Symbol("value")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ PatchesSchemaInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PatchesSchemaInner[name]))}

function check_required(o::PatchesSchemaInner)
    o.op === nothing && (return false)
    o.path === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PatchesSchemaInner }, name::Symbol, val)
    if name === Symbol("op")
        OpenAPI.validate_param(name, "PatchesSchemaInner", :enum, val, ["add", "remove", "replace", "move", "copy", "test"])
    end
    if name === Symbol("path")
        OpenAPI.validate_param(name, "PatchesSchemaInner", :minLength, val, 1)
    end
end
