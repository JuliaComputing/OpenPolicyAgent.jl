# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""response200Result_result_inner_ast_rules_inner_body_inner_terms_inner

    Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner(;
        type=nothing,
        value=nothing,
    )

    - type::String : The type of the term variable
    - value::Vector{Response200ResultResultInnerAstRulesInnerBodyInnerTermsInnerValueInner} : The list of types and values for the term variable
"""
Base.@kwdef mutable struct Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    value::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Response200ResultResultInnerAstRulesInnerBodyInnerTermsInnerValueInner} }

    function Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner(type, value, )
        OpenAPI.validate_property(Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner, Symbol("type"), type)
        OpenAPI.validate_property(Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner, Symbol("value"), value)
        return new(type, value, )
    end
end # type Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner

const _property_types_Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("value")=>"Vector{Response200ResultResultInnerAstRulesInnerBodyInnerTermsInnerValueInner}", )
OpenAPI.property_type(::Type{ Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner[name]))}

function check_required(o::Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner)
    true
end

function OpenAPI.validate_property(::Type{ Response200ResultResultInnerAstRulesInnerBodyInnerTermsInner }, name::Symbol, val)
end
