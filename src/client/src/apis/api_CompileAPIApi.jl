# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct CompileAPIApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `CompileAPIApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ CompileAPIApi }) = "http://localhost:8181"

const _returntypes_post_compile_CompileAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CompileSuccessResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ServerErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ServerErrorResponse,
)

function _oacinternal_post_compile(_api::CompileAPIApi; pretty=nothing, explain=nothing, metrics=nothing, instrument=nothing, partial_query_schema=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_post_compile_CompileAPIApi, "/v1/compile", [], partial_query_schema)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "explain", explain)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "metrics", metrics)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "instrument", instrument)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Partially evaluate a query.

The Compile API allows you to partially evaluate Rego queries and obtain a simplified version of the policy. This is most useful when building integrations where policy logic is to be translated and evaluated in another environment. <br/> For example, [this post](https://blog.openpolicyagent.org/write-policy-in-opa-enforce-policy-in-sql-d9d24db93bf4) on the OPA blog shows how SQL can be generated based on Compile API output. For more details on Partial Evaluation in OPA, please refer to [this blog post](https://blog.openpolicyagent.org/partial-evaluation-162750eaf422). <br/> The example below assumes that OPA has been given the following policy (use `PUT /v1/policies/{path}`): <br/> <pre> package example allow {   input.subject.clearance_level >= data.reports[_].clearance_level } </pre> <br/> Compile API **request body** so that it contain the following fields: <br/> <table> <tr><th>Field</th><th>Type</th><th>Required</th><th>Description</th></tr> <tr><td><code>query</code></td><td><code>string</code></td><td>Yes</td><td>The query to partially evaluate and compile.</td></tr> <tr><td><code>input</code></td><td><code>any</code></td><td>No</td><td>The input document to use during partial evaluation (default: undefined).</td></tr> <tr><td><code>options</code></td><td><code>object[string, any]</code></td><td>No</td><td>Additional options to use during partial evaluation. Only <code>disableInlining</code> option is supported. (default: undefined).</td></tr> <tr><td><code>unknowns</code></td><td><code>array[string]</code></td><td>No</td><td>The terms to treat as unknown during partial evaluation (default: <code>[\"input\"]</code>]).</td></tr> </table> <br/> For example: <br/> <code> {   \"query\": \"data.example.allow == true\",   \"input\": {     \"subject\": {       \"clearance_level\": 4     }   },   \"unknowns\": [     \"data.reports\"     ] } </code> <br/> <b>Unconditional Results from Partial Evaluation</b> When you partially evaluate a query with the Compile API, OPA returns a new set of queries and supporting policies. However, in some cases, the result of Partial Evaluation is a conclusive, unconditional answer. <br/> See [the guidance](https://www.openpolicyagent.org/docs/latest/rest-api/#unconditional-results-from-partial-evaluation) for details.

Params:
- pretty::Bool
- explain::String
- metrics::Bool
- instrument::Bool
- partial_query_schema::PartialQuerySchema

Return: CompileSuccessResponse, OpenAPI.Clients.ApiResponse
"""
function post_compile(_api::CompileAPIApi; pretty=nothing, explain=nothing, metrics=nothing, instrument=nothing, partial_query_schema=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_compile(_api; pretty=pretty, explain=explain, metrics=metrics, instrument=instrument, partial_query_schema=partial_query_schema, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function post_compile(_api::CompileAPIApi, response_stream::Channel; pretty=nothing, explain=nothing, metrics=nothing, instrument=nothing, partial_query_schema=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_compile(_api; pretty=pretty, explain=explain, metrics=metrics, instrument=instrument, partial_query_schema=partial_query_schema, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export post_compile
