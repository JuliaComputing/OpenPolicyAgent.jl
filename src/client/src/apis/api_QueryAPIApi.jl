# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct QueryAPIApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `QueryAPIApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ QueryAPIApi }) = "http://localhost:8181"

const _returntypes_query_get_QueryAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetDocumentSuccessResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ServerErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ServerErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ServerErrorResponse,
    Regex("^" * replace("501", "x"=>".") * "\$") => ServerErrorResponse,
)

function _oacinternal_query_get(_api::QueryAPIApi, q::String; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_query_get_QueryAPIApi, "/v1/query", [])
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "explain", explain)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "metrics", metrics)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "q", q)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Execute an ad-hoc query and return bindings for variables found in the query.

For queries that have large JSON values it is recommended to use the POST method with the query included as the POST body

Params:
- q::String (required)
- pretty::Bool
- explain::String
- metrics::Bool

Return: GetDocumentSuccessResponse, OpenAPI.Clients.ApiResponse
"""
function query_get(_api::QueryAPIApi, q::String; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = _oacinternal_query_get(_api, q; pretty=pretty, explain=explain, metrics=metrics, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function query_get(_api::QueryAPIApi, response_stream::Channel, q::String; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = _oacinternal_query_get(_api, q; pretty=pretty, explain=explain, metrics=metrics, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_query_post_QueryAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetDocumentSuccessResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ServerErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ServerErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ServerErrorResponse,
    Regex("^" * replace("501", "x"=>".") * "\$") => ServerErrorResponse,
)

function _oacinternal_query_post(_api::QueryAPIApi, query_parameter_post::QueryParameterPost; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_query_post_QueryAPIApi, "/v1/query", [], query_parameter_post)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "explain", explain)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "metrics", metrics)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Execute an ad-hoc query and return bindings for variables found in the query.

Query included as the POST body. E.g.: ``` {   \"query\": \"input.servers[i].ports[_] = \\\"p2\\\"; input.servers[i].name = name\",   \"input\": {     \"servers\": [ ... ],   } } ```

Params:
- query_parameter_post::QueryParameterPost (required)
- pretty::Bool
- explain::String
- metrics::Bool

Return: GetDocumentSuccessResponse, OpenAPI.Clients.ApiResponse
"""
function query_post(_api::QueryAPIApi, query_parameter_post::QueryParameterPost; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = _oacinternal_query_post(_api, query_parameter_post; pretty=pretty, explain=explain, metrics=metrics, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function query_post(_api::QueryAPIApi, response_stream::Channel, query_parameter_post::QueryParameterPost; pretty=nothing, explain=nothing, metrics=nothing, _mediaType=nothing)
    _ctx = _oacinternal_query_post(_api, query_parameter_post; pretty=pretty, explain=explain, metrics=metrics, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_simple_query_QueryAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Dict{String, Any},
    Regex("^" * replace("400", "x"=>".") * "\$") => ServerErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ServerErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ServerErrorResponse,
)

function _oacinternal_simple_query(_api::QueryAPIApi, request_body::Dict{String, Any}; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_simple_query_QueryAPIApi, "/", [], request_body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Execute a simple query.

OPA serves POST requests without a URL path by querying for the document at path /data/system/main. The content of that document defines the response entirely.

Params:
- request_body::Dict{String, Any} (required)
- pretty::Bool

Return: Dict{String, Any}, OpenAPI.Clients.ApiResponse
"""
function simple_query(_api::QueryAPIApi, request_body::Dict{String, Any}; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_simple_query(_api, request_body; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function simple_query(_api::QueryAPIApi, response_stream::Channel, request_body::Dict{String, Any}; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_simple_query(_api, request_body; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export query_get
export query_post
export simple_query
