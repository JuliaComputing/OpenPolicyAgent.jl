# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct StatusAPIApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `StatusAPIApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ StatusAPIApi }) = "http://localhost:8181"

const _returntypes_get_status_StatusAPIApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Dict{String, Any},
    Regex("^" * replace("500", "x"=>".") * "\$") => ServerErrorResponse,
)

function _oacinternal_get_status(_api::StatusAPIApi; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_status_StatusAPIApi, "/v1/status", [])
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get status

The /status API endpoint returns the status of the OPA server. This includes the status of the bundles and plugins.

Params:
- pretty::Bool

Return: Dict{String, Any}, OpenAPI.Clients.ApiResponse
"""
function get_status(_api::StatusAPIApi; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_status(_api; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_status(_api::StatusAPIApi, response_stream::Channel; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_status(_api; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_status
