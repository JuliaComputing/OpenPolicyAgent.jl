# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""partialQuerySchema

    PartialQuerySchema(;
        query=nothing,
        input=nothing,
        options=nothing,
        unknowns=nothing,
    )

    - query::String : The query to partially evaluate and compile.
    - input::Any : The input document to use during partial evaluation
    - options::Any : Additional options to use during partial evaluation. Only disableInlining option is supported.
    - unknowns::Vector{String} : The terms to treat as unknown during partial evaluation.
"""
Base.@kwdef mutable struct PartialQuerySchema <: OpenAPI.APIModel
    query::Union{Nothing, String} = nothing
    input::Union{Nothing, Any} = nothing
    options::Union{Nothing, Any} = nothing
    unknowns::Union{Nothing, Vector{String}} = nothing

    function PartialQuerySchema(query, input, options, unknowns, )
        OpenAPI.validate_property(PartialQuerySchema, Symbol("query"), query)
        OpenAPI.validate_property(PartialQuerySchema, Symbol("input"), input)
        OpenAPI.validate_property(PartialQuerySchema, Symbol("options"), options)
        OpenAPI.validate_property(PartialQuerySchema, Symbol("unknowns"), unknowns)
        return new(query, input, options, unknowns, )
    end
end # type PartialQuerySchema

const _property_types_PartialQuerySchema = Dict{Symbol,String}(Symbol("query")=>"String", Symbol("input")=>"Any", Symbol("options")=>"Any", Symbol("unknowns")=>"Vector{String}", )
OpenAPI.property_type(::Type{ PartialQuerySchema }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PartialQuerySchema[name]))}

function check_required(o::PartialQuerySchema)
    true
end

function OpenAPI.validate_property(::Type{ PartialQuerySchema }, name::Symbol, val)
end
