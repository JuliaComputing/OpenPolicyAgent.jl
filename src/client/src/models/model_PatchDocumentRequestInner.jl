# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""patchDocument_request_inner

    PatchDocumentRequestInner(;
        op=nothing,
        path=nothing,
        from=nothing,
        value=nothing,
    )

    - op::String
    - path::String
    - from::String
    - value::Dict{String, Any}
"""
Base.@kwdef mutable struct PatchDocumentRequestInner <: OpenAPI.APIModel
    op::Union{Nothing, String} = nothing
    path::Union{Nothing, String} = nothing
    from::Union{Nothing, String} = nothing
    value::Union{Nothing, Dict{String, Any}} = nothing

    function PatchDocumentRequestInner(op, path, from, value, )
        OpenAPI.validate_property(PatchDocumentRequestInner, Symbol("op"), op)
        OpenAPI.validate_property(PatchDocumentRequestInner, Symbol("path"), path)
        OpenAPI.validate_property(PatchDocumentRequestInner, Symbol("from"), from)
        OpenAPI.validate_property(PatchDocumentRequestInner, Symbol("value"), value)
        return new(op, path, from, value, )
    end
end # type PatchDocumentRequestInner

const _property_types_PatchDocumentRequestInner = Dict{Symbol,String}(Symbol("op")=>"String", Symbol("path")=>"String", Symbol("from")=>"String", Symbol("value")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ PatchDocumentRequestInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PatchDocumentRequestInner[name]))}

function check_required(o::PatchDocumentRequestInner)
    true
end

function OpenAPI.validate_property(::Type{ PatchDocumentRequestInner }, name::Symbol, val)
    if name === Symbol("op")
        OpenAPI.validate_param(name, "PatchDocumentRequestInner", :enum, val, ["add", "remove", "replace", "move", "copy", "test"])
    end
end
