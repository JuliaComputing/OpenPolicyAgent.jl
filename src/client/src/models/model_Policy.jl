# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""policy
A policy module

    Policy(;
        id=nothing,
        raw=nothing,
        ast=nothing,
    )

    - id::String : The name of a policy module
    - raw::String : A string representation of the full Rego policy
    - ast::PolicyAst
"""
Base.@kwdef mutable struct Policy <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    raw::Union{Nothing, String} = nothing
    ast = nothing # spec type: Union{ Nothing, PolicyAst }

    function Policy(id, raw, ast, )
        OpenAPI.validate_property(Policy, Symbol("id"), id)
        OpenAPI.validate_property(Policy, Symbol("raw"), raw)
        OpenAPI.validate_property(Policy, Symbol("ast"), ast)
        return new(id, raw, ast, )
    end
end # type Policy

const _property_types_Policy = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("raw")=>"String", Symbol("ast")=>"PolicyAst", )
OpenAPI.property_type(::Type{ Policy }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Policy[name]))}

function check_required(o::Policy)
    true
end

function OpenAPI.validate_property(::Type{ Policy }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Policy", :minLength, val, 1)
    end
    if name === Symbol("raw")
        OpenAPI.validate_param(name, "Policy", :minLength, val, 1)
    end
end
