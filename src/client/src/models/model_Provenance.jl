# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""provenance

    Provenance(;
        version=nothing,
        build_commit=nothing,
        build_timestamp=nothing,
        build_hostname=nothing,
        bundles=nothing,
    )

    - version::String : The version of this OPA instance
    - build_commit::String : The Git commit id of this OPA build.
    - build_timestamp::String : When this OPA instance was built (in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime))
    - build_hostname::String : The hostname where this instance was built.
    - bundles::Dict{String, Any} : A set of key-value pairs describing each bundle activated on the server.
"""
Base.@kwdef mutable struct Provenance <: OpenAPI.APIModel
    version::Union{Nothing, String} = nothing
    build_commit::Union{Nothing, String} = nothing
    build_timestamp::Union{Nothing, String} = nothing
    build_hostname::Union{Nothing, String} = nothing
    bundles::Union{Nothing, Dict{String, Any}} = nothing

    function Provenance(version, build_commit, build_timestamp, build_hostname, bundles, )
        OpenAPI.validate_property(Provenance, Symbol("version"), version)
        OpenAPI.validate_property(Provenance, Symbol("build_commit"), build_commit)
        OpenAPI.validate_property(Provenance, Symbol("build_timestamp"), build_timestamp)
        OpenAPI.validate_property(Provenance, Symbol("build_hostname"), build_hostname)
        OpenAPI.validate_property(Provenance, Symbol("bundles"), bundles)
        return new(version, build_commit, build_timestamp, build_hostname, bundles, )
    end
end # type Provenance

const _property_types_Provenance = Dict{Symbol,String}(Symbol("version")=>"String", Symbol("build_commit")=>"String", Symbol("build_timestamp")=>"String", Symbol("build_hostname")=>"String", Symbol("bundles")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ Provenance }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Provenance[name]))}

function check_required(o::Provenance)
    true
end

function OpenAPI.validate_property(::Type{ Provenance }, name::Symbol, val)
end
