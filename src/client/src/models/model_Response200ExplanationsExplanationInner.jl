# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""response200Explanations_explanation_inner

    Response200ExplanationsExplanationInner(;
        op=nothing,
        query_id=nothing,
        parent_id=nothing,
        type=nothing,
        node=nothing,
        locals=nothing,
    )

    - op::String : The kind of *trace event*  Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points: - enter - before a body or rule is evaluated - exit - after a body or rule has evaluated successfully - eval - before an expression is evaluated - fail - after an expression has evaluated to false. - redo - before evaluation restarts from a body, rule, or expression.  By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.
    - query_id::Float64 : The query that the trace event was emitted for. Use this field to distinguish trace events emitted by from different queries.
    - parent_id::Float64 : The parent query. Use this field to identify trace events from related queries.  For example, if query A references rule R, trace events emitted when evaluating rule R will have the *parent_id* field set to query Aâ€™s *query_id*.
    - type::String : The type of the **node** field
    - node::Response200ExplanationsExplanationInnerNode
    - locals::Vector{Response200ExplanationsExplanationInnerLocalsInner} : The query&#39;s term bindings at the point when the trace event was emitted.
"""
Base.@kwdef mutable struct Response200ExplanationsExplanationInner <: OpenAPI.APIModel
    op::Union{Nothing, String} = nothing
    query_id::Union{Nothing, Float64} = nothing
    parent_id::Union{Nothing, Float64} = nothing
    type::Union{Nothing, String} = nothing
    node = nothing # spec type: Union{ Nothing, Response200ExplanationsExplanationInnerNode }
    locals::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Response200ExplanationsExplanationInnerLocalsInner} }

    function Response200ExplanationsExplanationInner(op, query_id, parent_id, type, node, locals, )
        OpenAPI.validate_property(Response200ExplanationsExplanationInner, Symbol("op"), op)
        OpenAPI.validate_property(Response200ExplanationsExplanationInner, Symbol("query_id"), query_id)
        OpenAPI.validate_property(Response200ExplanationsExplanationInner, Symbol("parent_id"), parent_id)
        OpenAPI.validate_property(Response200ExplanationsExplanationInner, Symbol("type"), type)
        OpenAPI.validate_property(Response200ExplanationsExplanationInner, Symbol("node"), node)
        OpenAPI.validate_property(Response200ExplanationsExplanationInner, Symbol("locals"), locals)
        return new(op, query_id, parent_id, type, node, locals, )
    end
end # type Response200ExplanationsExplanationInner

const _property_types_Response200ExplanationsExplanationInner = Dict{Symbol,String}(Symbol("op")=>"String", Symbol("query_id")=>"Float64", Symbol("parent_id")=>"Float64", Symbol("type")=>"String", Symbol("node")=>"Response200ExplanationsExplanationInnerNode", Symbol("locals")=>"Vector{Response200ExplanationsExplanationInnerLocalsInner}", )
OpenAPI.property_type(::Type{ Response200ExplanationsExplanationInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Response200ExplanationsExplanationInner[name]))}

function check_required(o::Response200ExplanationsExplanationInner)
    true
end

function OpenAPI.validate_property(::Type{ Response200ExplanationsExplanationInner }, name::Symbol, val)
    if name === Symbol("op")
        OpenAPI.validate_param(name, "Response200ExplanationsExplanationInner", :enum, val, ["enter", "exit", "eval", "fail", "redo"])
    end
    if name === Symbol("query_id")
        OpenAPI.validate_param(name, "Response200ExplanationsExplanationInner", :minimum, val, 0, false)
    end
    if name === Symbol("parent_id")
        OpenAPI.validate_param(name, "Response200ExplanationsExplanationInner", :minimum, val, 0, false)
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "Response200ExplanationsExplanationInner", :enum, val, ["expr", "rule", "body"])
    end
end
