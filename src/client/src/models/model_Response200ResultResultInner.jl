# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""response200Result_result_inner

    Response200ResultResultInner(;
        id=nothing,
        raw=nothing,
        ast=nothing,
    )

    - id::String : The name of a policy module
    - raw::String : A string representation of the full Rego policy
    - ast::Response200ResultResultInnerAst
"""
Base.@kwdef mutable struct Response200ResultResultInner <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    raw::Union{Nothing, String} = nothing
    ast = nothing # spec type: Union{ Nothing, Response200ResultResultInnerAst }

    function Response200ResultResultInner(id, raw, ast, )
        OpenAPI.validate_property(Response200ResultResultInner, Symbol("id"), id)
        OpenAPI.validate_property(Response200ResultResultInner, Symbol("raw"), raw)
        OpenAPI.validate_property(Response200ResultResultInner, Symbol("ast"), ast)
        return new(id, raw, ast, )
    end
end # type Response200ResultResultInner

const _property_types_Response200ResultResultInner = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("raw")=>"String", Symbol("ast")=>"Response200ResultResultInnerAst", )
OpenAPI.property_type(::Type{ Response200ResultResultInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Response200ResultResultInner[name]))}

function check_required(o::Response200ResultResultInner)
    true
end

function OpenAPI.validate_property(::Type{ Response200ResultResultInner }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Response200ResultResultInner", :minLength, val, 1)
    end
    if name === Symbol("raw")
        OpenAPI.validate_param(name, "Response200ResultResultInner", :minLength, val, 1)
    end
end
