# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""response200Result_result_inner_ast_package_path_inner

    Response200ResultResultInnerAstPackagePathInner(;
        type=nothing,
        value=nothing,
    )

    - type::String : The type of the path operation
    - value::String : The path variable
"""
Base.@kwdef mutable struct Response200ResultResultInnerAstPackagePathInner <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    value::Union{Nothing, String} = nothing

    function Response200ResultResultInnerAstPackagePathInner(type, value, )
        OpenAPI.validate_property(Response200ResultResultInnerAstPackagePathInner, Symbol("type"), type)
        OpenAPI.validate_property(Response200ResultResultInnerAstPackagePathInner, Symbol("value"), value)
        return new(type, value, )
    end
end # type Response200ResultResultInnerAstPackagePathInner

const _property_types_Response200ResultResultInnerAstPackagePathInner = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("value")=>"String", )
OpenAPI.property_type(::Type{ Response200ResultResultInnerAstPackagePathInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Response200ResultResultInnerAstPackagePathInner[name]))}

function check_required(o::Response200ResultResultInnerAstPackagePathInner)
    true
end

function OpenAPI.validate_property(::Type{ Response200ResultResultInnerAstPackagePathInner }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "Response200ResultResultInnerAstPackagePathInner", :enum, val, ["import", "package"])
    end
end
