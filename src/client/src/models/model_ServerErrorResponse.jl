# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""serverErrorResponse

    ServerErrorResponse(;
        code=nothing,
        message=nothing,
        errors=nothing,
    )

    - code::String : The error code name
    - message::String : A general description of the error
    - errors::Vector{ErrorDetail} : Errors that may have been generated during the parse, compile, or installation of a policy module
"""
Base.@kwdef mutable struct ServerErrorResponse <: OpenAPI.APIModel
    code::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing
    errors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ErrorDetail} }

    function ServerErrorResponse(code, message, errors, )
        OpenAPI.validate_property(ServerErrorResponse, Symbol("code"), code)
        OpenAPI.validate_property(ServerErrorResponse, Symbol("message"), message)
        OpenAPI.validate_property(ServerErrorResponse, Symbol("errors"), errors)
        return new(code, message, errors, )
    end
end # type ServerErrorResponse

const _property_types_ServerErrorResponse = Dict{Symbol,String}(Symbol("code")=>"String", Symbol("message")=>"String", Symbol("errors")=>"Vector{ErrorDetail}", )
OpenAPI.property_type(::Type{ ServerErrorResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ServerErrorResponse[name]))}

function check_required(o::ServerErrorResponse)
    o.code === nothing && (return false)
    o.message === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ServerErrorResponse }, name::Symbol, val)
    if name === Symbol("code")
        OpenAPI.validate_param(name, "ServerErrorResponse", :minLength, val, 1)
    end
    if name === Symbol("message")
        OpenAPI.validate_param(name, "ServerErrorResponse", :minLength, val, 1)
    end
    if name === Symbol("errors")
        OpenAPI.validate_param(name, "ServerErrorResponse", :uniqueItems, val, true)
    end
end
