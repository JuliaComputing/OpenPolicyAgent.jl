# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""successResponse

    SuccessResponse(;
        decision_id=nothing,
        result=nothing,
        provenance=nothing,
        metrics=nothing,
    )

    - decision_id::String
    - result::Bool
    - provenance::Provenance
    - metrics::Dict{String, Any}
"""
Base.@kwdef mutable struct SuccessResponse <: OpenAPI.APIModel
    decision_id::Union{Nothing, String} = nothing
    result::Union{Nothing, Bool} = nothing
    provenance = nothing # spec type: Union{ Nothing, Provenance }
    metrics::Union{Nothing, Dict{String, Any}} = nothing

    function SuccessResponse(decision_id, result, provenance, metrics, )
        OpenAPI.validate_property(SuccessResponse, Symbol("decision_id"), decision_id)
        OpenAPI.validate_property(SuccessResponse, Symbol("result"), result)
        OpenAPI.validate_property(SuccessResponse, Symbol("provenance"), provenance)
        OpenAPI.validate_property(SuccessResponse, Symbol("metrics"), metrics)
        return new(decision_id, result, provenance, metrics, )
    end
end # type SuccessResponse

const _property_types_SuccessResponse = Dict{Symbol,String}(Symbol("decision_id")=>"String", Symbol("result")=>"Bool", Symbol("provenance")=>"Provenance", Symbol("metrics")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ SuccessResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SuccessResponse[name]))}

function check_required(o::SuccessResponse)
    true
end

function OpenAPI.validate_property(::Type{ SuccessResponse }, name::Symbol, val)
end
