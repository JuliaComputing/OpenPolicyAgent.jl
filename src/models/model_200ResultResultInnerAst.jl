# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""_200Result_result_inner_ast
The types for declarations and runtime objects passed to your implementation. This consists of an abstract syntax tree (AST) of policy modules, package and import declarations, rules, expressions, and terms.

    200ResultResultInnerAst(;
        package=nothing,
        rules=nothing,
    )

    - package::200ResultResultInnerAstPackage
    - rules::Vector{200ResultResultInnerAstRulesInner} : When OPA evaluates a rule, it generates the content of a [virtual documents](https://www.openpolicyagent.org/docs/latest/philosophy/#the-opa-document-model)
"""
Base.@kwdef mutable struct 200ResultResultInnerAst <: OpenAPI.APIModel
    package = nothing # spec type: Union{ Nothing, 200ResultResultInnerAstPackage }
    rules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{200ResultResultInnerAstRulesInner} }

    function 200ResultResultInnerAst(package, rules, )
        OpenAPI.validate_property(200ResultResultInnerAst, Symbol("package"), package)
        OpenAPI.validate_property(200ResultResultInnerAst, Symbol("rules"), rules)
        return new(package, rules, )
    end
end # type 200ResultResultInnerAst

const _property_types_200ResultResultInnerAst = Dict{Symbol,String}(Symbol("package")=>"200ResultResultInnerAstPackage", Symbol("rules")=>"Vector{200ResultResultInnerAstRulesInner}", )
OpenAPI.property_type(::Type{ 200ResultResultInnerAst }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_200ResultResultInnerAst[name]))}

function check_required(o::200ResultResultInnerAst)
    true
end

function OpenAPI.validate_property(::Type{ 200ResultResultInnerAst }, name::Symbol, val)
    if name === Symbol("rules")
        OpenAPI.validate_param(name, "200ResultResultInnerAst", :uniqueItems, val, true)
    end
end
