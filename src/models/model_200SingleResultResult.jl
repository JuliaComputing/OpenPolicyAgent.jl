# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""_200SingleResult_result

    200SingleResultResult(;
        services=nothing,
        labels=nothing,
        keys=nothing,
        decision_logs=nothing,
        status=nothing,
        bundles=nothing,
        default_authorization_decision=nothing,
        default_decision=nothing,
    )

    - services::200SingleResultResultServices
    - labels::200SingleResultResultLabels
    - keys::200SingleResultResultKeys
    - decision_logs::200SingleResultResultDecisionLogs
    - status::200SingleResultResultStatus
    - bundles::200SingleResultResultBundles
    - default_authorization_decision::String
    - default_decision::String
"""
Base.@kwdef mutable struct 200SingleResultResult <: OpenAPI.APIModel
    services = nothing # spec type: Union{ Nothing, 200SingleResultResultServices }
    labels = nothing # spec type: Union{ Nothing, 200SingleResultResultLabels }
    keys = nothing # spec type: Union{ Nothing, 200SingleResultResultKeys }
    decision_logs = nothing # spec type: Union{ Nothing, 200SingleResultResultDecisionLogs }
    status = nothing # spec type: Union{ Nothing, 200SingleResultResultStatus }
    bundles = nothing # spec type: Union{ Nothing, 200SingleResultResultBundles }
    default_authorization_decision::Union{Nothing, String} = nothing
    default_decision::Union{Nothing, String} = nothing

    function 200SingleResultResult(services, labels, keys, decision_logs, status, bundles, default_authorization_decision, default_decision, )
        OpenAPI.validate_property(200SingleResultResult, Symbol("services"), services)
        OpenAPI.validate_property(200SingleResultResult, Symbol("labels"), labels)
        OpenAPI.validate_property(200SingleResultResult, Symbol("keys"), keys)
        OpenAPI.validate_property(200SingleResultResult, Symbol("decision_logs"), decision_logs)
        OpenAPI.validate_property(200SingleResultResult, Symbol("status"), status)
        OpenAPI.validate_property(200SingleResultResult, Symbol("bundles"), bundles)
        OpenAPI.validate_property(200SingleResultResult, Symbol("default_authorization_decision"), default_authorization_decision)
        OpenAPI.validate_property(200SingleResultResult, Symbol("default_decision"), default_decision)
        return new(services, labels, keys, decision_logs, status, bundles, default_authorization_decision, default_decision, )
    end
end # type 200SingleResultResult

const _property_types_200SingleResultResult = Dict{Symbol,String}(Symbol("services")=>"200SingleResultResultServices", Symbol("labels")=>"200SingleResultResultLabels", Symbol("keys")=>"200SingleResultResultKeys", Symbol("decision_logs")=>"200SingleResultResultDecisionLogs", Symbol("status")=>"200SingleResultResultStatus", Symbol("bundles")=>"200SingleResultResultBundles", Symbol("default_authorization_decision")=>"String", Symbol("default_decision")=>"String", )
OpenAPI.property_type(::Type{ 200SingleResultResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_200SingleResultResult[name]))}

function check_required(o::200SingleResultResult)
    true
end

function OpenAPI.validate_property(::Type{ 200SingleResultResult }, name::Symbol, val)
end
