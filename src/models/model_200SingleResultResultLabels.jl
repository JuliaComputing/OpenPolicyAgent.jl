# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""_200SingleResult_result_labels
Labels

    200SingleResultResultLabels(;
        id=nothing,
        version=nothing,
    )

    - id::String : Label ID
    - version::String : Version
"""
Base.@kwdef mutable struct 200SingleResultResultLabels <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing

    function 200SingleResultResultLabels(id, version, )
        OpenAPI.validate_property(200SingleResultResultLabels, Symbol("id"), id)
        OpenAPI.validate_property(200SingleResultResultLabels, Symbol("version"), version)
        return new(id, version, )
    end
end # type 200SingleResultResultLabels

const _property_types_200SingleResultResultLabels = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("version")=>"String", )
OpenAPI.property_type(::Type{ 200SingleResultResultLabels }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_200SingleResultResultLabels[name]))}

function check_required(o::200SingleResultResultLabels)
    true
end

function OpenAPI.validate_property(::Type{ 200SingleResultResultLabels }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "200SingleResultResultLabels", :minLength, val, 1)
    end
    if name === Symbol("version")
        OpenAPI.validate_param(name, "200SingleResultResultLabels", :minLength, val, 1)
    end
end
