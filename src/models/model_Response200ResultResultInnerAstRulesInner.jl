# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""response200Result_result_inner_ast_rules_inner

    Response200ResultResultInnerAstRulesInner(;
        head=nothing,
        body=nothing,
    )

    - head::Response200ResultResultInnerAstRulesInnerHead
    - body::Vector{Response200ResultResultInnerAstRulesInnerBodyInner} : A list of the terms in this rule
"""
Base.@kwdef mutable struct Response200ResultResultInnerAstRulesInner <: OpenAPI.APIModel
    head = nothing # spec type: Union{ Nothing, Response200ResultResultInnerAstRulesInnerHead }
    body::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Response200ResultResultInnerAstRulesInnerBodyInner} }

    function Response200ResultResultInnerAstRulesInner(head, body, )
        OpenAPI.validate_property(Response200ResultResultInnerAstRulesInner, Symbol("head"), head)
        OpenAPI.validate_property(Response200ResultResultInnerAstRulesInner, Symbol("body"), body)
        return new(head, body, )
    end
end # type Response200ResultResultInnerAstRulesInner

const _property_types_Response200ResultResultInnerAstRulesInner = Dict{Symbol,String}(Symbol("head")=>"Response200ResultResultInnerAstRulesInnerHead", Symbol("body")=>"Vector{Response200ResultResultInnerAstRulesInnerBodyInner}", )
OpenAPI.property_type(::Type{ Response200ResultResultInnerAstRulesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Response200ResultResultInnerAstRulesInner[name]))}

function check_required(o::Response200ResultResultInnerAstRulesInner)
    true
end

function OpenAPI.validate_property(::Type{ Response200ResultResultInnerAstRulesInner }, name::Symbol, val)
end
